; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %riscv32_cheri_purecap_llc -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV32IXCHERI-IL32PC64 %s
; RUN: %riscv64_cheri_purecap_llc -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV64IXCHERI-L64PC128 %s

define dso_local void @bar() addrspace(200) nounwind {
; RV32IXCHERI-IL32PC64-LABEL: bar:
; RV32IXCHERI-IL32PC64:       # %bb.0: # %entry
; RV32IXCHERI-IL32PC64-NEXT:    lui a0, 1048575
; RV32IXCHERI-IL32PC64-NEXT:    addi a0, a0, -16
; RV32IXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, a0
; RV32IXCHERI-IL32PC64-NEXT:    lui a0, 1
; RV32IXCHERI-IL32PC64-NEXT:    addi a0, a0, 8
; RV32IXCHERI-IL32PC64-NEXT:    cincoffset ca0, csp, a0
; RV32IXCHERI-IL32PC64-NEXT:    csc cra, 0(ca0)
; RV32IXCHERI-IL32PC64-NEXT:    cincoffset ca0, csp, 8
; RV32IXCHERI-IL32PC64-NEXT:  .LBB0_1: # %entry
; RV32IXCHERI-IL32PC64-NEXT:    # Label of block must be emitted
; RV32IXCHERI-IL32PC64-NEXT:    auipcc ca1, %captab_pcrel_hi(foo)
; RV32IXCHERI-IL32PC64-NEXT:    clc ca1, %pcrel_lo(.LBB0_1)(ca1)
; RV32IXCHERI-IL32PC64-NEXT:    cjalr cra, ca1
; RV32IXCHERI-IL32PC64-NEXT:    lui a0, 1
; RV32IXCHERI-IL32PC64-NEXT:    addi a0, a0, 8
; RV32IXCHERI-IL32PC64-NEXT:    cincoffset ca0, csp, a0
; RV32IXCHERI-IL32PC64-NEXT:    clc cra, 0(ca0)
; RV32IXCHERI-IL32PC64-NEXT:    lui a0, 1
; RV32IXCHERI-IL32PC64-NEXT:    addi a0, a0, 16
; RV32IXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, a0
; RV32IXCHERI-IL32PC64-NEXT:    cret
;
; RV64IXCHERI-L64PC128-LABEL: bar:
; RV64IXCHERI-L64PC128:       # %bb.0: # %entry
; RV64IXCHERI-L64PC128-NEXT:    lui a0, 1048575
; RV64IXCHERI-L64PC128-NEXT:    addiw a0, a0, -32
; RV64IXCHERI-L64PC128-NEXT:    cincoffset csp, csp, a0
; RV64IXCHERI-L64PC128-NEXT:    lui a0, 1
; RV64IXCHERI-L64PC128-NEXT:    addiw a0, a0, 16
; RV64IXCHERI-L64PC128-NEXT:    cincoffset ca0, csp, a0
; RV64IXCHERI-L64PC128-NEXT:    csc cra, 0(ca0)
; RV64IXCHERI-L64PC128-NEXT:    cincoffset ca0, csp, 16
; RV64IXCHERI-L64PC128-NEXT:  .LBB0_1: # %entry
; RV64IXCHERI-L64PC128-NEXT:    # Label of block must be emitted
; RV64IXCHERI-L64PC128-NEXT:    auipcc ca1, %captab_pcrel_hi(foo)
; RV64IXCHERI-L64PC128-NEXT:    clc ca1, %pcrel_lo(.LBB0_1)(ca1)
; RV64IXCHERI-L64PC128-NEXT:    cjalr cra, ca1
; RV64IXCHERI-L64PC128-NEXT:    lui a0, 1
; RV64IXCHERI-L64PC128-NEXT:    addiw a0, a0, 16
; RV64IXCHERI-L64PC128-NEXT:    cincoffset ca0, csp, a0
; RV64IXCHERI-L64PC128-NEXT:    clc cra, 0(ca0)
; RV64IXCHERI-L64PC128-NEXT:    lui a0, 1
; RV64IXCHERI-L64PC128-NEXT:    addiw a0, a0, 32
; RV64IXCHERI-L64PC128-NEXT:    cincoffset csp, csp, a0
; RV64IXCHERI-L64PC128-NEXT:    cret
entry:
  %buf = alloca [4096 x i8], align 1, addrspace(200)
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8] addrspace(200)* %buf, i32 0, i32 0
  call addrspace(200) void @llvm.lifetime.start.p200i8(i64 4096, i8 addrspace(200)* nonnull %0) #3
  call addrspace(200) void @foo(i8 addrspace(200)* nonnull %0) #3
  call addrspace(200) void @llvm.lifetime.end.p200i8(i64 4096, i8 addrspace(200)* nonnull %0) #3
  ret void
}

declare void @llvm.lifetime.start.p200i8(i64 immarg, i8 addrspace(200)* nocapture) addrspace(200)
declare void @llvm.lifetime.end.p200i8(i64 immarg, i8 addrspace(200)* nocapture) addrspace(200)

declare void @foo(i8 addrspace(200)*) addrspace(200)
